// <auto-generated />
using System;
using App.Infra.DB.SQLServer.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.DB.SQLServer.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ExpertService");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.AdminEntity.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 0m,
                            FirstName = "reza",
                            IsDeleted = false,
                            LastName = "ahmadi",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CategoryEntity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "\\Images\\Category\\cleaning.jpg",
                            IsDeleted = false,
                            Name = "تمیز کاری",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "\\Images\\Category\\building.jpg",
                            IsDeleted = false,
                            Name = "ساختمان",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "\\Images\\Category\\repair.jpg",
                            IsDeleted = false,
                            Name = "تعمیرات اشیا",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "\\Images\\Category\\Moving.jpg",
                            IsDeleted = false,
                            Name = "اسباب و حمل بار",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "\\Images\\Category\\Car.jpg",
                            IsDeleted = false,
                            Name = "خودرو",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "\\Images\\Category\\Beauty.jpg",
                            IsDeleted = false,
                            Name = "سلامت و زیبایی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            ImagePath = "\\Images\\Category\\organiser.jpg",
                            IsDeleted = false,
                            Name = "سازمان ها مجتمع ها",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ImagePath = "\\Images\\Category\\Other.jpg",
                            IsDeleted = false,
                            Name = "سایر خدمات",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CityEntity.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Titel = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            Titel = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            Titel = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            Titel = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            Titel = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            Titel = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            Titel = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            Titel = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            Titel = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            Titel = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            Titel = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            Titel = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            Titel = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            Titel = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            Titel = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            Titel = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            Titel = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            Titel = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            Titel = "قم"
                        },
                        new
                        {
                            Id = 20,
                            Titel = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            Titel = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            Titel = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            Titel = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            Titel = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            Titel = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            Titel = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            Titel = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            Titel = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            Titel = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            Titel = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            Titel = "یزد"
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CommentEntity.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OfferId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.HomeServiceEntity.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\1.jpg",
                            IsDeleted = false,
                            Name = ">سرویس عادی نظافت",
                            SubCategoryId = 1,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\2.jpg",
                            IsDeleted = false,
                            Name = "سرویس ویژه نظافت",
                            SubCategoryId = 1,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\3.jpg",
                            IsDeleted = false,
                            Name = "قالیشویی",
                            SubCategoryId = 2,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\4.jpg",
                            IsDeleted = false,
                            Name = "خشکشویی",
                            SubCategoryId = 2,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\5.jpg",
                            IsDeleted = false,
                            Name = "سرامیک خودرو",
                            SubCategoryId = 3,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\6.jpg",
                            IsDeleted = false,
                            Name = "صفرشویی خودرو",
                            SubCategoryId = 3,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\7.jpg",
                            IsDeleted = false,
                            Name = "تعمیر و سرویس پکیج",
                            SubCategoryId = 4,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\8.jpg",
                            IsDeleted = false,
                            Name = "تعمیر و سرویس آبگرمکن<",
                            SubCategoryId = 4,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\9.jpg",
                            IsDeleted = false,
                            Name = "سنگ کاری",
                            SubCategoryId = 5,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\10.jpg",
                            IsDeleted = false,
                            Name = "نقاشی ساختمان",
                            SubCategoryId = 5,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\11.jpg",
                            IsDeleted = false,
                            Name = "نصب و تعمیر شیرآلات",
                            SubCategoryId = 6,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\12.jpg",
                            IsDeleted = false,
                            Name = "تخلیه چاه و لوله بازکنی",
                            SubCategoryId = 6,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\13.jpg",
                            IsDeleted = false,
                            Name = "تعمیر و سرویس پکیج",
                            SubCategoryId = 7,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\14.jpg",
                            IsDeleted = false,
                            Name = "تعمیر و سرویس آبگرمکن",
                            SubCategoryId = 7,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\15.jpg",
                            IsDeleted = false,
                            Name = "تعمیر کامپیوتر و لپ تاپ",
                            SubCategoryId = 9,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\16.jpg",
                            IsDeleted = false,
                            Name = "مودم و اینترنت",
                            SubCategoryId = 9,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\17.jpg",
                            IsDeleted = false,
                            Name = "نصب و تعمیر یخچال و فریزر",
                            SubCategoryId = 8,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\18.jpg",
                            IsDeleted = false,
                            Name = "نصب و تعمیر ماشین لباسشویی",
                            SubCategoryId = 8,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\19.jpg",
                            IsDeleted = false,
                            Name = "اسباب کشی با خاور و کامیون",
                            SubCategoryId = 10,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\20.jpg",
                            IsDeleted = false,
                            Name = "اسباب کشی با وانت و نیسان",
                            SubCategoryId = 10,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\21.jpg",
                            IsDeleted = false,
                            Name = "تعویض باتری خودرو",
                            SubCategoryId = 11,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\22.jpg",
                            IsDeleted = false,
                            Name = "باتری به باتری",
                            SubCategoryId = 11,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\23.jpg",
                            IsDeleted = false,
                            Name = "خدمات ناخن",
                            SubCategoryId = 12,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\24.jpg",
                            IsDeleted = false,
                            Name = "رنگ مو بانوان",
                            SubCategoryId = 12,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\25.jpg",
                            IsDeleted = false,
                            Name = "مراقبت و نگهداری",
                            SubCategoryId = 10,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\26.jpg",
                            IsDeleted = false,
                            Name = "پرستاری و تزریقات",
                            SubCategoryId = 10,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\27.jpg",
                            IsDeleted = false,
                            Name = "خدمات شرکتی (ویژه شرکت های کوچک و متوسط)",
                            SubCategoryId = 14,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\28.jpg",
                            IsDeleted = false,
                            Name = "پیشنهاد فروش خدمات آچاره به شرکت ها",
                            SubCategoryId = 14,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\29.jpg",
                            IsDeleted = false,
                            Name = "استخدام خدمتکار",
                            SubCategoryId = 15,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\30.jpg",
                            IsDeleted = false,
                            Name = "تعمیرات لباس",
                            SubCategoryId = 16,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\31.jpg",
                            IsDeleted = false,
                            Name = "دوخت لباس زنانه",
                            SubCategoryId = 16,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\32.jpg",
                            IsDeleted = false,
                            Name = "کیک و شیرینی",
                            SubCategoryId = 17,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            BasePrice = 500m,
                            ImagePath = "\\Images\\Services\\33.jpg",
                            IsDeleted = false,
                            Name = "ارسال هدیه",
                            SubCategoryId = 17,
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.ImageEntity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.OfferEntity.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("OrderId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.OrderEntity.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateFor")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            ImagePath = "\\Images\\SubCategory\\1.jpg",
                            IsDeleted = false,
                            Name = "نظافت و پذیرایی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ImagePath = "\\Images\\SubCategory\\2.jpg",
                            IsDeleted = false,
                            Name = "شستشو",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            ImagePath = "\\Images\\SubCategory\\3.jpg",
                            IsDeleted = false,
                            Name = "کارواش و دیتیلینگ",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ImagePath = "\\Images\\SubCategory\\4.jpg",
                            IsDeleted = false,
                            Name = "سرمایش و گرمایش",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ImagePath = "\\Images\\SubCategory\\5.jpg",
                            IsDeleted = false,
                            Name = "تعمیرات ساختمان",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            ImagePath = "\\Images\\SubCategory\\6.jpg",
                            IsDeleted = false,
                            Name = "لوله کشی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            ImagePath = "\\Images\\SubCategory\\7.jpg",
                            IsDeleted = false,
                            Name = "سرمایش و گرمایش",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            ImagePath = "\\Images\\SubCategory\\8.jpg",
                            IsDeleted = false,
                            Name = "نصب و تعمیر لوازم خانگی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            ImagePath = "\\Images\\SubCategory\\9.jpg",
                            IsDeleted = false,
                            Name = "خدمات کامپیوتریی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            ImagePath = "\\Images\\SubCategory\\10.jpg",
                            IsDeleted = false,
                            Name = "سباب‌کشی و حمل‌",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            ImagePath = "\\Images\\SubCategory\\11.jpg",
                            IsDeleted = false,
                            Name = "خدمات و تعمیرات خودرو",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            ImagePath = "\\Images\\SubCategory\\12.jpg",
                            IsDeleted = false,
                            Name = "زیبایی بانوان",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            ImagePath = "\\Images\\SubCategory\\13.jpg",
                            IsDeleted = false,
                            Name = "پزشکی و پرستاری",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 7,
                            ImagePath = "\\Images\\SubCategory\\14.jpg",
                            IsDeleted = false,
                            Name = "خدمات شرکتی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 7,
                            ImagePath = "\\Images\\SubCategory\\15.jpg",
                            IsDeleted = false,
                            Name = "تامین نیروی انسانی",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            ImagePath = "\\Images\\SubCategory\\16.jpg",
                            IsDeleted = false,
                            Name = "خیاطی و تعمیرات لباس",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 8,
                            ImagePath = "\\Images\\SubCategory\\17.jpg",
                            IsDeleted = false,
                            Name = "مجالس و رویدادها",
                            TimeCreated = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.Users.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49533cdb-aeb8-452f-b2ac-64043551b8b3",
                            Email = "Reza@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Reza Ahmadi",
                            LockoutEnabled = false,
                            NormalizedEmail = "REZA@GMAIL.COM",
                            NormalizedUserName = "REZA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTvt7crCAFK/Q8+kIs/BDz8NS4sXLVTXvDH6qqrVr8YoTfdezBEWgyK9fVQMwNFvA==",
                            PhoneNumber = "09909169328",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "025231bf-ced2-4d43-9b8b-54d97e9473ea",
                            TwoFactorEnabled = false,
                            UserName = "Reza@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertService", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.HomeServiceEntity.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.AdminEntity.Entities.Admin", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("HomeService.Domain.Core.HomeService.AdminEntity.Entities.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CommentEntity.Entities.Comment", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("Comments")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.OfferEntity.Entities.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("HomeService.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.CityEntity.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.HomeServiceEntity.Entities.Service", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", "SubCategory")
                        .WithMany("Services")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.ImageEntity.Image", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.OrderEntity.Entities.Order", "Order")
                        .WithMany("Images")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.OfferEntity.Entities.Offer", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("offers")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.OrderEntity.Entities.Order", "Order")
                        .WithMany("Offers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.OrderEntity.Entities.Order", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.CityEntity.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.CustomerEntity.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", "Expert")
                        .WithMany("AcceptedOffers")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HomeService.Domain.Core.HomeService.HomeServiceEntity.Entities.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("Expert");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.CategoryEntity.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HomeService.Domain.Core.HomeService.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CategoryEntity.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.CustomerEntity.Entities.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.ExpertEntity.Entities.Expert", b =>
                {
                    b.Navigation("AcceptedOffers");

                    b.Navigation("Comments");

                    b.Navigation("offers");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.HomeServiceEntity.Entities.Service", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.OrderEntity.Entities.Order", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.SubCategoryEntity.Entities.SubCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("HomeService.Domain.Core.HomeService.Users.Entities.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });
#pragma warning restore 612, 618
        }
    }
}
